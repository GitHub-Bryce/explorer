private int copyFile(File src, File dst) throws InterruptedException {
		doIsFile = false;
		int ret = SUCCESS;
		Message msg;
		try {
			if (!root && dst.exists() && checkFile) {
				ret = multFile(dst.getAbsolutePath());
				if (ret == FileItemClickListener.COPY_CANCEL) {
					return FileItemClickListener.COPY_CANCEL;
				}
				if (ret == FileItemClickListener.COPY_SKIP) {
					return FileItemClickListener.COPY_SKIP;
				}
				dst = new File(toFile);
			}

			if (src.isFile()) {
				// ÎÄ¼þ
				doIsFile = true;				
				fIn = new FileInputStream(src);
				fOut = new FileOutputStream(dst);
				in = new BufferedInputStream(fIn, BUFF_SIZE);
				out = new BufferedOutputStream(fOut, BUFF_SIZE);
				byte[] bytes = new byte[BUFF_SIZE];
				int length;
				int tmpSize = 0;
				while ((length = in.read(bytes)) != -1) {
					out.write(bytes, 0, length);
					copyedLength += length;
					tmpSize += length;
					/**/
					if (isCancel) {
						dst.delete();
						return (ret = FileItemClickListener.COPY_CANCEL);
					}
					if (!isHidden && (tmpSize >= perSize) && !deleAfterCopy) {
						msg = handler.obtainMessage(
								FileItemClickListener
								.HANDLER_INCREMENT_COPY_PROGRESS);
						msg.arg1 = tmpSize;
						tmpSize = 0;
						handler.sendMessage(msg);
					}
					/**/
				}
				out.flush();
			} else {
				// ÎÄ¼þ¼Ð
				//Log.d(tag, "folder");
				if (toFile.contains(src.getAbsolutePath()))
					return FileItemClickListener.COPY_SKIP;
				dst.mkdirs();
				File[] fFiles = src.listFiles();
								
				int count = fFiles.length;
				for (int i = 0; i < count; i++) {
					ret = copyFile(fFiles[i], new File(dst.getAbsoluteFile() + "/"
							+ fFiles[i].getName()));
					if ( ret == FileItemClickListener.COPY_CANCEL) {
						return FileItemClickListener.COPY_CANCEL;
					}
				}
			}

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (!doIsFile)
				return ret;
			try {
				if (fIn != null)
					fIn.close();
				if (fOut != null)
					fOut.close();
				return ret;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
